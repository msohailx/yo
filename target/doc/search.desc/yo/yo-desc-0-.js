searchState.loadedDescShard("yo", 0, "Represents a connection with a client or server, managing …\nRepresents various states a connection can be in.\nThe default maximum size for incomplete events, set to 16 …\nRepresents different types of events in the system.\nRepresents an informational HTTP response with status …\nA buffer for receiving and storing data with efficient …\nRepresents an HTTP request with method, headers, and HTTP …\nRepresents an HTTP response with status code, headers, …\nRoles for either a client or server.\nSentinel values used to represent certain states in a …\nAdds data to the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a comma-separated list of values from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the buffer is empty.\nReturns the number of bytes currently in the buffer.\nCreates a new, empty <code>ReceiveBuffer</code>.\nCreates a new <code>Connection</code> with the given role and max …\nRetrieves the next event for the connection based on its …\nRemoves and returns the first byte from the buffer, or <code>None</code>…\nReceives and stores incoming data in the connection’s …\nSends the given event by serializing it to bytes based on …\nSets a comma-separated list of values for the given key in …\nEnum representing various types of events in a …\nA struct representing HTTP headers as a vector of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Request</code>, normalizes headers, and validates …\nCreates a new <code>Response</code>, validates the status code, and …\nCreates a new <code>Data</code> instance with the given chunk flags.\nCreates a new <code>EndOfMessage</code> instance, normalizing the …\nCreates a new <code>ConnectionClosed</code> instance.\nNormalizes and validates the given headers.\nValidates the HTTP method.\nValidates the target (e.g., URL path or resource).\nIt is the Headers struct definition\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves comma-separated values from a header.\nChecks if the “Expect: 100-continue” header is present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Headers</code> instance with the provided header …\nNormalizes and validates the provided headers.\nReturns a vector of raw key-value pairs from the headers.\nSets new comma-separated values for a header.\nChunk extension – RFC 7230 Section 3.1.2.2 Represents …\nField-name – RFC 7230 Section 3.2.6 Defines a field …\nChunk size – RFC 7230 Section 3.1.2.2 Represents the …\nHTTP Version – RFC 7230 Section 2.6 Represents the HTTP …\nHTTP Method – RFC 7230 Section 3.2.6 Defines valid HTTP …\nOptional Whitespace (OWS) – RFC 7230 Section 3.2.3 …\nReason phrase – RFC 7230 Section 3.2.6 Defines a valid …\nRequest target – RFC 7230 Section 5.3 Represents the …\nStatus code – RFC 7230 Section 3.2.6 Defines the format …\nToken – RFC 7230 Section 3.2.6 Defines the allowed …\nVisible characters (vchar) – RFC 7230 Section 3.2.6 …\nChunk header – RFC 7230 Section 3.1.2.2 Represents the …\nCompiles a regex pattern and returns a <code>Regex</code> instance.\nField content – RFC 7230 Section 3.2.6 Represents the …\nField value – RFC 7230 Section 3.2.6 Represents an …\nHeader field – RFC 7230 Section 3.2.6 Represents a …\nRequest line – RFC 7230 Section 3.1 Represents the …\nStatus line – RFC 7230 Section 3.1 Represents the status …\nA reader for chunked transfer encoding in HTTP.\nA reader that handles content with a specified length.\nRepresents chunked data in an HTTP message, including the …\nRepresents the end of an HTTP message, including headers.\nImplements the <code>Reader</code> trait for <code>Http10Reader</code>.\nRepresents an informational HTTP response (status codes …\nImplements the <code>Display</code> trait for <code>LocalProtocolError</code>. This …\nReader implementation from the reader.rs file\nCreates and returns a <code>ReadersType</code> hashmap with predefined …\nReceiveBuffer struct is used to recieve the data into a …\nA struct representing an error specific to a remote …\nRepresents an HTTP request, including headers and parsed …\nRepresents an HTTP response, including status code, …\nType alias for a hashmap storing reader objects, keyed by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the next line in the buffer is obviously an …\nTries to extract at most <code>length</code> bytes from the buffer. If …\nto extract data from the buffer\nAttempts to extract the next line from the buffer. It …\nA buffer for receiving data, with efficient operations for …\nAppends bytes to the buffer.\nReturns the buffer data as a byte slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the buffer is empty.\nChecks if the next line is an obviously invalid request …\nReturns the length of the buffer.\nTry to extract at most ‘count’ bytes from the buffer\nAttempts to extract lines up to the first blank line.\nAttempts to extract the next complete line (ends with <code>\\r\\n</code> …\nCreates a new, empty <code>ReceiveBuffer</code>.\nRepresents the state of a connection, including keep-alive …\nEnum representing various connection states and actions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ConnectionState</code> with initial values.\nProcesses a client switch proposal by adding it to the …\nProcesses an error by marking the given <code>role</code> as <code>Error</code> and …\nProcesses an event and triggers transitions based on the …\nDisables keep-alive and triggers state transitions.\nStarts a new cycle by resetting the connection states to …\nSentinel trait for types that act as sentinels.\nConverts the given input into a <code>Vec&lt;u8&gt;</code>, ensuring it is …\nRetrieves the error status hint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new local protocol error.\nCreates a new remote protocol error.\nValidates data against a regex pattern, returning captured …\nThis here just defines the version number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")